on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Upload Release Asset

jobs:
  build:
    name: Upload Release Asset
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
        # - name: Build yarn # This would actually build your project, using zip for an example artifact
        #   run: |
        #       yarn install
        #       yarn build
      - name: Zip project # This would actually build your project, using zip for an example artifact
        run: |
            zip -r build src/
      - name: Create Release Note
        run: |
          git log $(git describe --tags --abbrev=0 HEAD~1)..HEAD --pretty="%s" --reverse > RELEASE_NOTE.md
          sed -i -E 's/^feat(\(.*\))?(!)?:/- :sparkles:/g' RELEASE_NOTE.md
          sed -i -E 's/^fix(\(.*\))?(!)?:/- :bug:/g' RELEASE_NOTE.md
          sed -i -E 's/^docs(\(.*\))?(!)?:/- :pencil:/g' RELEASE_NOTE.md
          sed -i -E 's/^chore(\(.*\))?(!)?:/- :tv:/g' RELEASE_NOTE.md
          sed -i -E 's/^improve(\(.*\))?(!)?:/- :100:/g' RELEASE_NOTE.md
          sed -i -E 's/^test(\(.*\))?(!)?:/- :cop:/g' RELEASE_NOTE.md
          sed -i -E 's/^[^-].*[(\(.*\))?(!)?:]/- :package:/g' RELEASE_NOTE.md
          sed -i -E 's/^[^-]/- :package: &/g' RELEASE_NOTE.md
          RELEASE_NOTE=$(cat RELEASE_NOTE.md)
          RELEASE_NOTE="${RELEASE_NOTE//'%'/'%25'}"
          RELEASE_NOTE="${RELEASE_NOTE//$'\n'/'%0A'}"
          RELEASE_NOTE="${RELEASE_NOTE//$'\r'/'%0D'}"
          cat RELEASE_NOTE.md
          echo "::set-env name=RELEASE_NOTE::$RELEASE_NOTE"
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          body: ${{ env.RELEASE_NOTE }}
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./build.zip
          asset_name: build.zip
          asset_content_type: application/zip
# https://github.com/marketplace/actions/upload-a-release-asset
